{
  "openapi": "3.1.0",
  "info": {
    "title": "Resinkit API",
    "description": "Service for interacting with Resinkit",
    "contact": {
      "name": "Resinkit",
      "url": "https://resink.ai/",
      "email": "support@resink.ai"
    },
    "version": "0.1.0"
  },
  "paths": {
    "/api/v1/flink/lib/download": {
      "put": {
        "tags": [
          "flink"
        ],
        "summary": "Download Jar",
        "operationId": "download_jar_api_v1_flink_lib_download_put",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          },
          {
            "name": "url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Url"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/flink/lib/upload": {
      "post": {
        "tags": [
          "flink"
        ],
        "summary": "Upload Jar",
        "operationId": "upload_jar_api_v1_flink_lib_upload_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_jar_api_v1_flink_lib_upload_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/flink/runsql": {
      "post": {
        "tags": [
          "flink"
        ],
        "summary": "Run Sql",
        "operationId": "run_sql_api_v1_flink_runsql_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SQLQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/catalogstores": {
      "get": {
        "tags": [
          "catalog"
        ],
        "summary": "List Catalog Stores",
        "description": "Retrieves a list of all configured catalog stores.\n\nReturns:\n    A JSON object containing a list of catalog store definitions.\n\nRaises:\n    HTTPException: 500 Internal Server Error if there's an issue retrieving the list.",
        "operationId": "list_catalog_stores_api_v1_catalogstores_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogStoresResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "catalog"
        ],
        "summary": "Create Catalog Store",
        "description": "Creates a new catalog store configuration.\n\nArgs:\n    catalog_store: The Catalog Store Definition for the store to be created.\n\nReturns:\n    The complete Catalog Store Definition of the newly created store.\n\nRaises:\n    HTTPException: 400 Bad Request if the request body is malformed or missing required fields.\n    HTTPException: 409 Conflict if a catalog store with the provided name already exists.\n    HTTPException: 500 Internal Server Error if there's an issue persisting the configuration.",
        "operationId": "create_catalog_store_api_v1_catalogstores_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogStoreDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogStoreDefinition"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/catalogstores/{catalogstore_name}": {
      "get": {
        "tags": [
          "catalog"
        ],
        "summary": "Get Catalog Store",
        "description": "Retrieves the definition of a specific catalog store identified by its name.\n\nArgs:\n    catalogstore_name: The unique name of the catalog store to retrieve.\n\nReturns:\n    The Catalog Store Definition object for the requested store.\n\nRaises:\n    HTTPException: 404 Not Found if no catalog store with the specified name exists.\n    HTTPException: 500 Internal Server Error if there's an issue retrieving the store details.",
        "operationId": "get_catalog_store_api_v1_catalogstores__catalogstore_name__get",
        "parameters": [
          {
            "name": "catalogstore_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique name of the catalog store to retrieve",
              "title": "Catalogstore Name"
            },
            "description": "The unique name of the catalog store to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogStoreDefinition"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "catalog"
        ],
        "summary": "Delete Catalog Store",
        "description": "Deletes a specific catalog store identified by its name.\n\nArgs:\n    catalogstore_name: The unique name of the catalog store to delete.\n\nReturns:\n    204 No Content on successful deletion.\n\nRaises:\n    HTTPException: 404 Not Found if no catalog store with the specified name exists.\n    HTTPException: 500 Internal Server Error if there's an issue deleting the store.",
        "operationId": "delete_catalog_store_api_v1_catalogstores__catalogstore_name__delete",
        "parameters": [
          {
            "name": "catalogstore_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique name of the catalog store to delete",
              "title": "Catalogstore Name"
            },
            "description": "The unique name of the catalog store to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/catalogstores/{catalogstore_name}/catalogs": {
      "get": {
        "tags": [
          "catalog"
        ],
        "summary": "List Catalogs",
        "description": "Retrieves a list of all catalogs configured within the specified catalog store.",
        "operationId": "list_catalogs_api_v1_catalogstores__catalogstore_name__catalogs_get",
        "parameters": [
          {
            "name": "catalogstore_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the catalog store",
              "title": "Catalogstore Name"
            },
            "description": "The name of the catalog store"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogResponse"
                  },
                  "title": "Response List Catalogs Api V1 Catalogstores  Catalogstore Name  Catalogs Get"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "catalog"
        ],
        "summary": "Create Catalog",
        "description": "Creates a new catalog (either JDBC or Hive) within the specified catalog store.",
        "operationId": "create_catalog_api_v1_catalogstores__catalogstore_name__catalogs_post",
        "parameters": [
          {
            "name": "catalogstore_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the catalog store",
              "title": "Catalogstore Name"
            },
            "description": "The name of the catalog store"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogResponse"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Conflict"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/catalogstores/{catalogstore_name}/catalogs/{catalog_name}": {
      "get": {
        "tags": [
          "catalog"
        ],
        "summary": "Get Catalog",
        "description": "Retrieves the configuration details of a specific catalog.",
        "operationId": "get_catalog_api_v1_catalogstores__catalogstore_name__catalogs__catalog_name__get",
        "parameters": [
          {
            "name": "catalogstore_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the catalog store",
              "title": "Catalogstore Name"
            },
            "description": "The name of the catalog store"
          },
          {
            "name": "catalog_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the catalog to retrieve",
              "title": "Catalog Name"
            },
            "description": "The name of the catalog to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogResponse"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "catalog"
        ],
        "summary": "Update Catalog",
        "description": "Updates the configuration of an existing catalog. This is typically a full replacement\nof the configuration for the given catalog name. The type of the catalog cannot be changed via PUT.",
        "operationId": "update_catalog_api_v1_catalogstores__catalogstore_name__catalogs__catalog_name__put",
        "parameters": [
          {
            "name": "catalogstore_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the catalog store",
              "title": "Catalogstore Name"
            },
            "description": "The name of the catalog store"
          },
          {
            "name": "catalog_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the catalog to update",
              "title": "Catalog Name"
            },
            "description": "The name of the catalog to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogResponse"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "catalog"
        ],
        "summary": "Delete Catalog",
        "description": "Deletes a specific catalog from the catalog store.",
        "operationId": "delete_catalog_api_v1_catalogstores__catalogstore_name__catalogs__catalog_name__delete",
        "parameters": [
          {
            "name": "catalogstore_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the catalog store",
              "title": "Catalogstore Name"
            },
            "description": "The name of the catalog store"
          },
          {
            "name": "catalog_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the catalog to delete",
              "title": "Catalog Name"
            },
            "description": "The name of the catalog to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Conflict"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Health Check",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/sysinfo": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "System Info",
        "description": "Check the health status of all ResinKit components",
        "operationId": "system_info_sysinfo_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/pat/validate": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Validate",
        "operationId": "validate_api_v1_pat_validate_get",
        "parameters": [
          {
            "name": "x-resinkit-pat",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Resinkit-Pat"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agent/tasks": {
      "post": {
        "tags": [
          "tasks",
          "mcp",
          "ai"
        ],
        "summary": "Submit Task",
        "operationId": "submit_resinkit_task",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Payload"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "tasks",
          "mcp",
          "ai"
        ],
        "summary": "List Tasks",
        "operationId": "list_resinkit_tasks",
        "parameters": [
          {
            "name": "task_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task Type"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "task_name_contains",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task Name Contains"
            }
          },
          {
            "name": "tags_include_any",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tags Include Any"
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created After"
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created Before"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 100,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Page Token"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "created_at",
              "title": "Sort By"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "desc",
              "title": "Sort Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agent/tasks/yaml": {
      "post": {
        "tags": [
          "tasks",
          "mcp",
          "ai"
        ],
        "summary": "Submit Task Yaml",
        "operationId": "submit_resinkit_task_yaml",
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "Yaml Payload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agent/tasks/{task_id}": {
      "get": {
        "tags": [
          "tasks",
          "mcp",
          "ai"
        ],
        "summary": "Get Task Details",
        "operationId": "get_resinkit_task_details",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agent/tasks/{task_id}/cancel": {
      "post": {
        "tags": [
          "tasks",
          "mcp",
          "ai"
        ],
        "summary": "Cancel Task",
        "operationId": "cancel_resinkit_task",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether to forcefully cancel the task",
              "default": false,
              "title": "Force"
            },
            "description": "Whether to forcefully cancel the task"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agent/tasks/{task_id}/logs": {
      "get": {
        "tags": [
          "tasks",
          "mcp",
          "ai"
        ],
        "summary": "Get Task Logs",
        "operationId": "get_resinkit_task_logs",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "level",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Log level filter (INFO, WARN, ERROR, DEBUG)",
              "default": "INFO",
              "title": "Level"
            },
            "description": "Log level filter (INFO, WARN, ERROR, DEBUG)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogEntry"
                  },
                  "title": "Response Get Resinkit Task Logs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agent/tasks/{task_id}/results": {
      "get": {
        "tags": [
          "tasks",
          "mcp",
          "ai"
        ],
        "summary": "Get Task Results",
        "operationId": "get_resinkit_task_results",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agent/tasks/{task_id}/permanent": {
      "delete": {
        "tags": [
          "tasks",
          "mcp",
          "ai"
        ],
        "summary": "Permanently Delete Task",
        "description": "Permanently delete a task and its events if the task is in an end state (COMPLETED, FAILED, CANCELLED, or expired).",
        "operationId": "delete_resinkit_task_permanent",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agent/variables": {
      "post": {
        "tags": [
          "variables",
          "mcp",
          "ai"
        ],
        "summary": "Create a new variable",
        "description": "Create a new variable with encrypted value storage",
        "operationId": "create_variable",
        "parameters": [
          {
            "name": "created_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "user",
              "title": "Created By"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VariableCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VariableResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "variables",
          "mcp",
          "ai"
        ],
        "summary": "List all variables",
        "description": "List all variables without their encrypted values",
        "operationId": "list_variables",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VariableResponse"
                  },
                  "title": "Response List Variables"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agent/variables/{name}": {
      "get": {
        "tags": [
          "variables",
          "mcp",
          "ai"
        ],
        "summary": "Get a variable by name",
        "description": "Get a variable by name without its encrypted value",
        "operationId": "get_variable",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VariableResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "variables",
          "mcp",
          "ai"
        ],
        "summary": "Update a variable",
        "description": "Update a variable's value and/or description",
        "operationId": "update_variable",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VariableUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VariableResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "variables",
          "mcp",
          "ai"
        ],
        "summary": "Delete a variable",
        "description": "Delete a variable by name",
        "operationId": "delete_variable",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agent/data-sources/sources": {
      "post": {
        "tags": [
          "data-sources",
          "mcp",
          "ai"
        ],
        "summary": "Create a new data source",
        "description": "Create a new data source configuration for database connections",
        "operationId": "create_data_source",
        "parameters": [
          {
            "name": "created_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "user",
              "title": "Created By"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SqlSourceCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlSourceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "data-sources",
          "mcp",
          "ai"
        ],
        "summary": "List all data sources",
        "description": "Get a list of all configured data sources",
        "operationId": "list_data_sources",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SqlSourceResponse"
                  },
                  "title": "Response List Data Sources"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agent/data-sources/test-connection": {
      "post": {
        "tags": [
          "data-sources",
          "mcp",
          "ai"
        ],
        "summary": "Test database connection",
        "description": "Test database connection without persisting credentials",
        "operationId": "test_data_source_connection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SqlSourceCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlConnectionTestResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agent/data-sources/sources/{source_name}": {
      "get": {
        "tags": [
          "data-sources",
          "mcp",
          "ai"
        ],
        "summary": "Get data source by name",
        "description": "Retrieve a specific data source configuration by name",
        "operationId": "get_data_source",
        "parameters": [
          {
            "name": "source_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the data source",
              "title": "Source Name"
            },
            "description": "Name of the data source"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlSourceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "data-sources",
          "mcp",
          "ai"
        ],
        "summary": "Update data source",
        "description": "Update an existing data source configuration",
        "operationId": "update_data_source",
        "parameters": [
          {
            "name": "source_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the data source to update",
              "title": "Source Name"
            },
            "description": "Name of the data source to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SqlSourceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlSourceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "data-sources",
          "mcp",
          "ai"
        ],
        "summary": "Delete data source",
        "description": "Delete a data source configuration",
        "operationId": "delete_data_source",
        "parameters": [
          {
            "name": "source_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the data source to delete",
              "title": "Source Name"
            },
            "description": "Name of the data source to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agent/data-sources/sources/{source_name}/databases": {
      "get": {
        "tags": [
          "data-sources",
          "mcp",
          "ai"
        ],
        "summary": "List databases",
        "description": "List databases available in a data source",
        "operationId": "list_sql_databases",
        "parameters": [
          {
            "name": "source_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the data source",
              "title": "Source Name"
            },
            "description": "Name of the data source"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatabaseInfo"
                  },
                  "title": "Response List Sql Databases"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agent/data-sources/sources/{source_name}/schemas": {
      "get": {
        "tags": [
          "data-sources",
          "mcp",
          "ai"
        ],
        "summary": "List schemas",
        "description": "List schemas available in a database",
        "operationId": "list_sql_schemas",
        "parameters": [
          {
            "name": "source_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the data source",
              "title": "Source Name"
            },
            "description": "Name of the data source"
          },
          {
            "name": "database_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional database name filter",
              "title": "Database Name"
            },
            "description": "Optional database name filter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaInfo"
                  },
                  "title": "Response List Sql Schemas"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agent/data-sources/sources/{source_name}/tables": {
      "get": {
        "tags": [
          "data-sources",
          "mcp",
          "ai"
        ],
        "summary": "List tables",
        "description": "List tables available in a schema",
        "operationId": "list_sql_tables",
        "parameters": [
          {
            "name": "source_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the data source",
              "title": "Source Name"
            },
            "description": "Name of the data source"
          },
          {
            "name": "schema_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional schema name filter",
              "title": "Schema Name"
            },
            "description": "Optional schema name filter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TableInfo"
                  },
                  "title": "Response List Sql Tables"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agent/data-sources/sources/{source_name}/tables/{table_name}/columns": {
      "get": {
        "tags": [
          "data-sources",
          "mcp",
          "ai"
        ],
        "summary": "Get table columns",
        "description": "Get column information for a specific table",
        "operationId": "get_sql_table_columns",
        "parameters": [
          {
            "name": "source_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the data source",
              "title": "Source Name"
            },
            "description": "Name of the data source"
          },
          {
            "name": "table_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the table",
              "title": "Table Name"
            },
            "description": "Name of the table"
          },
          {
            "name": "schema_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional schema name",
              "title": "Schema Name"
            },
            "description": "Optional schema name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ColumnInfo"
                  },
                  "title": "Response Get Sql Table Columns"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agent/data-sources/query": {
      "post": {
        "tags": [
          "data-sources",
          "mcp",
          "ai"
        ],
        "summary": "Execute SQL query",
        "description": "Execute a SQL query against a data source",
        "operationId": "execute_query",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SqlQueryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlQueryResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agent/db-crawl/crawl": {
      "post": {
        "tags": [
          "db-crawl",
          "mcp",
          "ai"
        ],
        "summary": "Crawl database tables",
        "description": "Crawl specified database tables and return structured knowledge including schema, sample data, and DSDS",
        "operationId": "crawl_database_tables",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DbCrawlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DbCrawlResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agent/kafka-crawl/crawl": {
      "post": {
        "tags": [
          "kafka-crawl",
          "mcp",
          "ai"
        ],
        "summary": "Crawl Kafka topics",
        "description": "Crawl specified Kafka topics and return structured knowledge including schemas, sample messages, and field analysis",
        "operationId": "crawl_kafka_topics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KafkaCrawlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KafkaCrawlResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kb/{remote_folder}/upload": {
      "post": {
        "tags": [
          "knowledge-base",
          "remote-files"
        ],
        "summary": "Upload a file to remote folder",
        "description": "Upload a file to the specified remote folder",
        "operationId": "upload_file_to_remote_folder",
        "parameters": [
          {
            "name": "remote_folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the remote folder",
              "title": "Remote Folder"
            },
            "description": "Name of the remote folder"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file_to_remote_folder"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kb/{remote_folder}/download/{file_path}": {
      "get": {
        "tags": [
          "knowledge-base",
          "remote-files"
        ],
        "summary": "Download a file from remote folder",
        "description": "Download a file from the specified remote folder",
        "operationId": "download_file_from_remote_folder",
        "parameters": [
          {
            "name": "remote_folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the remote folder",
              "title": "Remote Folder"
            },
            "description": "Name of the remote folder"
          },
          {
            "name": "file_path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Relative path of the file to download",
              "title": "File Path"
            },
            "description": "Relative path of the file to download"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kb/{remote_folder}/files": {
      "get": {
        "tags": [
          "knowledge-base",
          "remote-files"
        ],
        "summary": "List files in remote folder",
        "description": "List all files in the specified remote folder",
        "operationId": "list_files_in_remote_folder",
        "parameters": [
          {
            "name": "remote_folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the remote folder",
              "title": "Remote Folder"
            },
            "description": "Name of the remote folder"
          },
          {
            "name": "recursive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Recursive"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kb/{remote_folder}/diff": {
      "post": {
        "tags": [
          "knowledge-base",
          "remote-files"
        ],
        "summary": "Compare local files with remote",
        "description": "Compare local files with remote files to identify differences",
        "operationId": "diff_files_with_remote_folder",
        "parameters": [
          {
            "name": "remote_folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the remote folder",
              "title": "Remote Folder"
            },
            "description": "Name of the remote folder"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiffRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiffResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kb/{remote_folder}/files/{file_path}": {
      "delete": {
        "tags": [
          "knowledge-base",
          "remote-files"
        ],
        "summary": "Delete a file from remote folder",
        "description": "Delete a file or directory from the specified remote folder",
        "operationId": "delete_file_from_remote_folder",
        "parameters": [
          {
            "name": "remote_folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the remote folder",
              "title": "Remote Folder"
            },
            "description": "Name of the remote folder"
          },
          {
            "name": "file_path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Relative path of the file/directory to delete",
              "title": "File Path"
            },
            "description": "Relative path of the file/directory to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteFileResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kb/{remote_folder}/glob": {
      "post": {
        "tags": [
          "knowledge-base",
          "remote-files"
        ],
        "summary": "Find files matching glob pattern",
        "description": "Find files in the remote folder matching a glob pattern",
        "operationId": "glob_files_in_remote_folder",
        "parameters": [
          {
            "name": "remote_folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the remote folder",
              "title": "Remote Folder"
            },
            "description": "Name of the remote folder"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kb/{remote_folder}/search": {
      "post": {
        "tags": [
          "knowledge-base",
          "remote-files"
        ],
        "summary": "Search files by content",
        "description": "Search for files in the remote folder by content using grep patterns",
        "operationId": "search_files_by_content",
        "parameters": [
          {
            "name": "remote_folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the remote folder",
              "title": "Remote Folder"
            },
            "description": "Name of the remote folder"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentSearchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AnalysisConfig": {
        "properties": {
          "calculate_null_percentage": {
            "type": "boolean",
            "title": "Calculate Null Percentage",
            "description": "Calculate null percentage for fields",
            "default": true
          },
          "estimate_cardinality": {
            "type": "boolean",
            "title": "Estimate Cardinality",
            "description": "Estimate cardinality of field values",
            "default": true
          }
        },
        "type": "object",
        "title": "AnalysisConfig",
        "description": "Configuration for statistical analysis"
      },
      "AttributeDetectionConfig": {
        "properties": {
          "primary_key": {
            "type": "boolean",
            "title": "Primary Key",
            "description": "Detect primary key attributes",
            "default": true
          },
          "foreign_key": {
            "type": "boolean",
            "title": "Foreign Key",
            "description": "Detect foreign key attributes",
            "default": true
          },
          "unique_constraint": {
            "type": "boolean",
            "title": "Unique Constraint",
            "description": "Detect unique constraint attributes",
            "default": true
          },
          "not_null": {
            "type": "boolean",
            "title": "Not Null",
            "description": "Detect not null attributes",
            "default": true
          },
          "default_value": {
            "type": "boolean",
            "title": "Default Value",
            "description": "Detect default value attributes",
            "default": true
          }
        },
        "type": "object",
        "title": "AttributeDetectionConfig",
        "description": "Configuration for attribute detection"
      },
      "Body_upload_file_to_remote_folder": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File",
            "description": "File to upload"
          },
          "file_path": {
            "type": "string",
            "title": "File Path",
            "description": "Relative path where the file should be stored"
          },
          "overwrite": {
            "type": "boolean",
            "title": "Overwrite",
            "description": "Whether to overwrite existing files",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "file",
          "file_path"
        ],
        "title": "Body_upload_file_to_remote_folder"
      },
      "Body_upload_jar_api_v1_flink_lib_upload_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "filename": {
            "type": "string",
            "title": "Filename"
          }
        },
        "type": "object",
        "required": [
          "file",
          "filename"
        ],
        "title": "Body_upload_jar_api_v1_flink_lib_upload_post"
      },
      "CatalogRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "properties": {
            "additionalProperties": true,
            "type": "object",
            "title": "Properties"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "properties"
        ],
        "title": "CatalogRequest",
        "example": {
          "name": "my_catalog",
          "properties": {
            "default-database": "mydb",
            "username": "user",
            "password": "password",
            "base-url": "jdbc:postgresql://localhost:5432"
          },
          "type": "jdbc"
        }
      },
      "CatalogResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "properties": {
            "additionalProperties": true,
            "type": "object",
            "title": "Properties"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "properties"
        ],
        "title": "CatalogResponse",
        "example": {
          "name": "my_catalog",
          "properties": {
            "default-database": "mydb",
            "username": "user",
            "base-url": "jdbc:postgresql://localhost:5432"
          },
          "type": "jdbc"
        }
      },
      "CatalogStoreDefinition": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Unique identifier for the catalog store"
          },
          "kind": {
            "type": "string",
            "title": "Kind",
            "description": "Type of the catalog store"
          },
          "options": {
            "additionalProperties": true,
            "type": "object",
            "title": "Options",
            "description": "Key-value pairs for specific catalog store configurations"
          }
        },
        "type": "object",
        "required": [
          "name",
          "kind"
        ],
        "title": "CatalogStoreDefinition",
        "description": "Data model representing a catalog store configuration"
      },
      "CatalogStoresResponse": {
        "properties": {
          "catalogStores": {
            "items": {
              "$ref": "#/components/schemas/CatalogStoreDefinition"
            },
            "type": "array",
            "title": "Catalogstores"
          }
        },
        "type": "object",
        "required": [
          "catalogStores"
        ],
        "title": "CatalogStoresResponse",
        "description": "Response model for listing catalog stores"
      },
      "ColumnInfo": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "nullable": {
            "type": "boolean",
            "title": "Nullable"
          },
          "default": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Default"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "nullable"
        ],
        "title": "ColumnInfo"
      },
      "ContentSearchRequest": {
        "properties": {
          "file_name_filter": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Name Filter",
            "description": "File name filter pattern (e.g., '*.log' or '*.txt')"
          },
          "grep_pattern": {
            "type": "string",
            "title": "Grep Pattern",
            "description": "Grep pattern to search for in file contents"
          },
          "show_content": {
            "type": "boolean",
            "title": "Show Content",
            "description": "Whether to return file content in results",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "grep_pattern"
        ],
        "title": "ContentSearchRequest",
        "description": "Request model for content search"
      },
      "ContentSearchResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/ContentSearchResult"
            },
            "type": "array",
            "title": "Results",
            "description": "List of files matching the search criteria"
          },
          "total_matches": {
            "type": "integer",
            "title": "Total Matches",
            "description": "Total number of files found"
          },
          "search_pattern": {
            "type": "string",
            "title": "Search Pattern",
            "description": "The grep pattern used"
          },
          "file_filter": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Filter",
            "description": "The file name filter used"
          }
        },
        "type": "object",
        "required": [
          "results",
          "total_matches",
          "search_pattern"
        ],
        "title": "ContentSearchResponse",
        "description": "Response model for content search operation"
      },
      "ContentSearchResult": {
        "properties": {
          "file_path": {
            "type": "string",
            "title": "File Path",
            "description": "Path to the file relative to remote folder"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content",
            "description": "File content if show_content is True"
          }
        },
        "type": "object",
        "required": [
          "file_path"
        ],
        "title": "ContentSearchResult",
        "description": "Result for a single file found during content search"
      },
      "DSDSConfig": {
        "properties": {
          "generate": {
            "type": "boolean",
            "title": "Generate",
            "description": "Whether to generate DSDS",
            "default": true
          },
          "include_examples": {
            "type": "boolean",
            "title": "Include Examples",
            "description": "Include example values in DSDS",
            "default": true
          },
          "max_examples_per_column": {
            "type": "integer",
            "title": "Max Examples Per Column",
            "description": "Maximum number of examples per column",
            "default": 3
          },
          "include_comments": {
            "type": "boolean",
            "title": "Include Comments",
            "description": "Include column comments if available",
            "default": true
          },
          "type_inference": {
            "$ref": "#/components/schemas/TypeInferenceConfig"
          },
          "attribute_detection": {
            "$ref": "#/components/schemas/AttributeDetectionConfig"
          }
        },
        "type": "object",
        "title": "DSDSConfig",
        "description": "Configuration for Descriptive Sample Data Schema generation"
      },
      "DatabaseInfo": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "DatabaseInfo"
      },
      "DatabaseKind": {
        "type": "string",
        "enum": [
          "mysql",
          "postgresql",
          "oracle",
          "mssql",
          "sqlite",
          "starrocks",
          "kafka"
        ],
        "title": "DatabaseKind"
      },
      "DbCrawlConfig": {
        "properties": {
          "source": {
            "type": "string",
            "title": "Source",
            "description": "SQL source name (configured via /sources endpoints)"
          },
          "defaults": {
            "$ref": "#/components/schemas/GlobalDefaults"
          },
          "tables": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/TableSelection"
                    },
                    {
                      "$ref": "#/components/schemas/TableRegexSelection"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tables",
            "description": "List of table specifications (if not provided, crawls all tables)"
          },
          "dsds": {
            "$ref": "#/components/schemas/DSDSConfig"
          }
        },
        "type": "object",
        "required": [
          "source"
        ],
        "title": "DbCrawlConfig",
        "description": "Main configuration for database crawling"
      },
      "DbCrawlRequest": {
        "properties": {
          "config": {
            "$ref": "#/components/schemas/DbCrawlConfig",
            "description": "Database crawl configuration"
          },
          "save_remote": {
            "type": "boolean",
            "title": "Save Remote",
            "description": "Save crawled results to remote file system",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "config"
        ],
        "title": "DbCrawlRequest",
        "description": "Request model for database crawl API"
      },
      "DbCrawlResult": {
        "properties": {
          "retrieval_metadata": {
            "$ref": "#/components/schemas/RetrievalMetadata"
          },
          "tables": {
            "items": {
              "$ref": "#/components/schemas/TableCrawlResult"
            },
            "type": "array",
            "title": "Tables",
            "description": "Results for each crawled table"
          }
        },
        "type": "object",
        "required": [
          "retrieval_metadata",
          "tables"
        ],
        "title": "DbCrawlResult",
        "description": "Complete result of database crawling operation"
      },
      "DefaultSettings": {
        "properties": {
          "sample_messages": {
            "type": "integer",
            "title": "Sample Messages",
            "description": "Default number of messages to sample",
            "default": 10
          },
          "sampling_strategy": {
            "$ref": "#/components/schemas/SamplingStrategy",
            "description": "Default sampling strategy",
            "default": "earliest"
          },
          "consumer_timeout_ms": {
            "type": "integer",
            "title": "Consumer Timeout Ms",
            "description": "Consumer timeout in milliseconds",
            "default": 5000
          }
        },
        "type": "object",
        "title": "DefaultSettings",
        "description": "Global default settings for message sampling"
      },
      "DeleteFileResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether the deletion was successful"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Success or error message"
          },
          "deleted_path": {
            "type": "string",
            "title": "Deleted Path",
            "description": "Path of the deleted file/directory"
          }
        },
        "type": "object",
        "required": [
          "success",
          "message",
          "deleted_path"
        ],
        "title": "DeleteFileResponse",
        "description": "Response model for file deletion"
      },
      "DiffRequest": {
        "properties": {
          "local_files": {
            "items": {
              "$ref": "#/components/schemas/FileMetadata"
            },
            "type": "array",
            "title": "Local Files",
            "description": "List of local file metadata"
          }
        },
        "type": "object",
        "required": [
          "local_files"
        ],
        "title": "DiffRequest",
        "description": "Request model for comparing local files with remote"
      },
      "DiffResponse": {
        "properties": {
          "differences": {
            "items": {
              "$ref": "#/components/schemas/FileDiff"
            },
            "type": "array",
            "title": "Differences",
            "description": "List of file differences"
          },
          "summary": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Summary",
            "description": "Summary of differences by status"
          }
        },
        "type": "object",
        "required": [
          "differences",
          "summary"
        ],
        "title": "DiffResponse",
        "description": "Response model for file diff operation"
      },
      "ErrorResponse": {
        "properties": {
          "error_code": {
            "type": "string",
            "title": "Error Code"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "details": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Details"
          }
        },
        "type": "object",
        "required": [
          "error_code",
          "message"
        ],
        "title": "ErrorResponse",
        "example": {
          "details": "Catalog 'my_catalog' was not found in catalog store 'my_store'",
          "error_code": "CATALOG_NOT_FOUND",
          "message": "The specified catalog does not exist"
        }
      },
      "FileDiff": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Path",
            "description": "File path"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Status: 'local_only', 'remote_only', 'modified', 'same'"
          },
          "local_metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FileMetadata"
              },
              {
                "type": "null"
              }
            ],
            "description": "Local file metadata"
          },
          "remote_metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FileMetadata"
              },
              {
                "type": "null"
              }
            ],
            "description": "Remote file metadata"
          }
        },
        "type": "object",
        "required": [
          "path",
          "status"
        ],
        "title": "FileDiff",
        "description": "Represents a difference between local and remote files"
      },
      "FileListResponse": {
        "properties": {
          "files": {
            "items": {
              "$ref": "#/components/schemas/FileMetadata"
            },
            "type": "array",
            "title": "Files",
            "description": "List of files and directories"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count",
            "description": "Total number of files"
          }
        },
        "type": "object",
        "required": [
          "files",
          "total_count"
        ],
        "title": "FileListResponse",
        "description": "Response model for listing files"
      },
      "FileMetadata": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "File name"
          },
          "path": {
            "type": "string",
            "title": "Path",
            "description": "Relative path within the remote folder"
          },
          "size": {
            "type": "integer",
            "title": "Size",
            "description": "File size in bytes"
          },
          "modified_time": {
            "type": "string",
            "format": "date-time",
            "title": "Modified Time",
            "description": "Last modified timestamp"
          },
          "is_directory": {
            "type": "boolean",
            "title": "Is Directory",
            "description": "Whether this is a directory",
            "default": false
          },
          "checksum": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum",
            "description": "MD5 checksum of the file"
          }
        },
        "type": "object",
        "required": [
          "name",
          "path",
          "size",
          "modified_time"
        ],
        "title": "FileMetadata",
        "description": "Metadata for a file in the remote file system"
      },
      "GlobRequest": {
        "properties": {
          "pattern": {
            "type": "string",
            "title": "Pattern",
            "description": "Glob pattern to match files"
          },
          "include_directories": {
            "type": "boolean",
            "title": "Include Directories",
            "description": "Whether to include directories in results",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "pattern"
        ],
        "title": "GlobRequest",
        "description": "Request model for globbing files"
      },
      "GlobResponse": {
        "properties": {
          "matches": {
            "items": {
              "$ref": "#/components/schemas/FileMetadata"
            },
            "type": "array",
            "title": "Matches",
            "description": "Files matching the glob pattern"
          },
          "pattern": {
            "type": "string",
            "title": "Pattern",
            "description": "The glob pattern used"
          },
          "total_matches": {
            "type": "integer",
            "title": "Total Matches",
            "description": "Total number of matches"
          }
        },
        "type": "object",
        "required": [
          "matches",
          "pattern",
          "total_matches"
        ],
        "title": "GlobResponse",
        "description": "Response model for glob operation"
      },
      "GlobalDefaults": {
        "properties": {
          "sample_rows": {
            "type": "integer",
            "title": "Sample Rows",
            "description": "Default number of sample rows to retrieve",
            "default": 3
          }
        },
        "type": "object",
        "title": "GlobalDefaults",
        "description": "Global default settings"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "KafkaCrawlConfig": {
        "properties": {
          "kafka_source": {
            "$ref": "#/components/schemas/KafkaSource",
            "description": "Kafka cluster connection details"
          },
          "defaults": {
            "$ref": "#/components/schemas/DefaultSettings"
          },
          "topics": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TopicSelection"
                },
                {
                  "$ref": "#/components/schemas/TopicRegexSelection"
                }
              ]
            },
            "type": "array",
            "minItems": 1,
            "title": "Topics",
            "description": "List of topic specifications"
          },
          "schema_inference": {
            "$ref": "#/components/schemas/SchemaInferenceConfig"
          }
        },
        "type": "object",
        "required": [
          "kafka_source",
          "topics"
        ],
        "title": "KafkaCrawlConfig",
        "description": "Main configuration for Kafka message crawling"
      },
      "KafkaCrawlRequest": {
        "properties": {
          "config": {
            "$ref": "#/components/schemas/KafkaCrawlConfig",
            "description": "Kafka crawl configuration"
          }
        },
        "type": "object",
        "required": [
          "config"
        ],
        "title": "KafkaCrawlRequest",
        "description": "Request model for Kafka crawl API"
      },
      "KafkaCrawlResult": {
        "properties": {
          "retrieval_metadata": {
            "$ref": "#/components/schemas/KafkaRetrievalMetadata",
            "description": "Metadata about the crawl operation"
          },
          "topics": {
            "items": {
              "$ref": "#/components/schemas/KafkaTopicCrawlResult"
            },
            "type": "array",
            "title": "Topics",
            "description": "Results for each crawled topic"
          }
        },
        "type": "object",
        "required": [
          "retrieval_metadata",
          "topics"
        ],
        "title": "KafkaCrawlResult",
        "description": "Complete result of Kafka crawling operation"
      },
      "KafkaFieldAnalysis": {
        "properties": {
          "inferred_type": {
            "type": "string",
            "title": "Inferred Type",
            "description": "Inferred data type"
          },
          "examples": {
            "items": {},
            "type": "array",
            "title": "Examples",
            "description": "Example values"
          },
          "analysis": {
            "additionalProperties": true,
            "type": "object",
            "title": "Analysis",
            "description": "Statistical analysis results"
          }
        },
        "type": "object",
        "required": [
          "inferred_type",
          "examples",
          "analysis"
        ],
        "title": "KafkaFieldAnalysis",
        "description": "Analysis results for a specific Kafka message field"
      },
      "KafkaInferredSchema": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Root schema type"
          },
          "properties": {
            "anyOf": [
              {
                "additionalProperties": {
                  "$ref": "#/components/schemas/KafkaJsonSchemaProperty"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Properties",
            "description": "Schema properties"
          },
          "required": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Required",
            "description": "Required properties"
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "KafkaInferredSchema",
        "description": "Inferred JSON schema for a Kafka topic"
      },
      "KafkaJsonSchemaProperty": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Property type"
          },
          "format": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Format",
            "description": "Property format"
          },
          "items": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Items",
            "description": "Array items schema"
          },
          "properties": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Properties",
            "description": "Object properties schema"
          },
          "required": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Required",
            "description": "Required properties for objects"
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "KafkaJsonSchemaProperty",
        "description": "JSON Schema property definition for Kafka messages"
      },
      "KafkaRetrievalMetadata": {
        "properties": {
          "timestamp_utc": {
            "type": "string",
            "title": "Timestamp Utc",
            "description": "UTC timestamp when crawl was performed"
          },
          "kafka_source": {
            "type": "string",
            "title": "Kafka Source",
            "description": "Kafka bootstrap servers"
          },
          "config_hash": {
            "type": "string",
            "title": "Config Hash",
            "description": "Hash of the configuration used"
          }
        },
        "type": "object",
        "required": [
          "timestamp_utc",
          "kafka_source",
          "config_hash"
        ],
        "title": "KafkaRetrievalMetadata",
        "description": "Metadata about the Kafka crawl operation"
      },
      "KafkaSource": {
        "properties": {
          "bootstrap_servers": {
            "type": "string",
            "title": "Bootstrap Servers",
            "description": "Comma-separated list of Kafka brokers"
          },
          "security_protocol": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Security Protocol",
            "description": "Security protocol (e.g., SASL_SSL)"
          },
          "sasl_mechanism": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sasl Mechanism",
            "description": "SASL mechanism (e.g., PLAIN)"
          },
          "schema_registry_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Schema Registry Url",
            "description": "Schema Registry URL for Avro/Protobuf"
          },
          "sasl_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sasl Username",
            "description": "SASL username"
          },
          "sasl_password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sasl Password",
            "description": "SASL password"
          }
        },
        "type": "object",
        "required": [
          "bootstrap_servers"
        ],
        "title": "KafkaSource",
        "description": "Kafka cluster connection configuration"
      },
      "KafkaTopicCrawlResult": {
        "properties": {
          "topic_name": {
            "type": "string",
            "title": "Topic Name",
            "description": "Name of the topic"
          },
          "partitions": {
            "type": "integer",
            "title": "Partitions",
            "description": "Number of partitions"
          },
          "inferred_schema": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/KafkaInferredSchema"
              },
              {
                "type": "null"
              }
            ],
            "description": "Inferred JSON schema"
          },
          "sample_messages": {
            "items": {},
            "type": "array",
            "title": "Sample Messages",
            "description": "Sample messages from the topic"
          },
          "field_analysis": {
            "anyOf": [
              {
                "additionalProperties": {
                  "$ref": "#/components/schemas/KafkaFieldAnalysis"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Field Analysis",
            "description": "Field-level analysis"
          }
        },
        "type": "object",
        "required": [
          "topic_name",
          "partitions",
          "sample_messages"
        ],
        "title": "KafkaTopicCrawlResult",
        "description": "Result of crawling a single Kafka topic"
      },
      "LogEntry": {
        "properties": {
          "timestamp": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Timestamp"
          },
          "level": {
            "type": "string",
            "title": "Level"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "timestamp",
          "level",
          "message"
        ],
        "title": "LogEntry"
      },
      "RetrievalMetadata": {
        "properties": {
          "timestamp_utc": {
            "type": "string",
            "title": "Timestamp Utc",
            "description": "UTC timestamp when crawl was performed"
          },
          "source_database": {
            "type": "string",
            "title": "Source Database",
            "description": "Source database name"
          },
          "config_hash": {
            "type": "string",
            "title": "Config Hash",
            "description": "Hash of the configuration used"
          }
        },
        "type": "object",
        "required": [
          "timestamp_utc",
          "source_database",
          "config_hash"
        ],
        "title": "RetrievalMetadata",
        "description": "Metadata about the crawl operation"
      },
      "SQLQuery": {
        "properties": {
          "sql": {
            "type": "string",
            "title": "Sql"
          }
        },
        "type": "object",
        "required": [
          "sql"
        ],
        "title": "SQLQuery"
      },
      "SamplingStrategy": {
        "type": "string",
        "enum": [
          "latest",
          "earliest",
          "latest_offset"
        ],
        "title": "SamplingStrategy",
        "description": "Message sampling strategies"
      },
      "SchemaInferenceConfig": {
        "properties": {
          "generate": {
            "type": "boolean",
            "title": "Generate",
            "description": "Whether to generate inferred schemas",
            "default": true
          },
          "include_examples": {
            "type": "boolean",
            "title": "Include Examples",
            "description": "Include example values in field analysis",
            "default": true
          },
          "max_examples_per_field": {
            "type": "integer",
            "title": "Max Examples Per Field",
            "description": "Maximum number of examples per field",
            "default": 3
          },
          "analysis": {
            "$ref": "#/components/schemas/AnalysisConfig"
          }
        },
        "type": "object",
        "title": "SchemaInferenceConfig",
        "description": "Configuration for schema inference"
      },
      "SchemaInfo": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "SchemaInfo"
      },
      "SqlConnectionTestResult": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether the connection test succeeded"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Success or error message"
          },
          "connection_time_ms": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Connection Time Ms",
            "description": "Connection time in milliseconds"
          }
        },
        "type": "object",
        "required": [
          "success",
          "message"
        ],
        "title": "SqlConnectionTestResult"
      },
      "SqlQueryRequest": {
        "properties": {
          "source_name": {
            "type": "string",
            "title": "Source Name",
            "description": "Name of the SQL source to execute against"
          },
          "query": {
            "type": "string",
            "title": "Query",
            "description": "SQL query to execute"
          },
          "limit": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit",
            "description": "Maximum number of rows to return",
            "default": 1000
          }
        },
        "type": "object",
        "required": [
          "source_name",
          "query"
        ],
        "title": "SqlQueryRequest"
      },
      "SqlQueryResult": {
        "properties": {
          "columns": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Columns"
          },
          "rows": {
            "items": {
              "items": {},
              "type": "array"
            },
            "type": "array",
            "title": "Rows"
          },
          "row_count": {
            "type": "integer",
            "title": "Row Count"
          },
          "execution_time_ms": {
            "type": "number",
            "title": "Execution Time Ms"
          }
        },
        "type": "object",
        "required": [
          "columns",
          "rows",
          "row_count",
          "execution_time_ms"
        ],
        "title": "SqlQueryResult"
      },
      "SqlSourceCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Unique name for the SQL source"
          },
          "kind": {
            "$ref": "#/components/schemas/DatabaseKind",
            "description": "Type of database"
          },
          "host": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Host",
            "description": "Database host (not required for sqlite)"
          },
          "port": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Port",
            "description": "Database port (not required for sqlite)"
          },
          "database": {
            "type": "string",
            "title": "Database",
            "description": "Database name"
          },
          "user": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User",
            "description": "Username (not required for sqlite, can reference variables)"
          },
          "password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Password",
            "description": "Password (not required for sqlite, can reference variables)"
          },
          "query_timeout": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Query Timeout",
            "description": "Query timeout duration",
            "default": "30s"
          },
          "extra_params": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Extra Params",
            "description": "Additional connection parameters"
          }
        },
        "type": "object",
        "required": [
          "name",
          "kind",
          "database"
        ],
        "title": "SqlSourceCreate"
      },
      "SqlSourceResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "kind": {
            "$ref": "#/components/schemas/DatabaseKind"
          },
          "host": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Host"
          },
          "port": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Port"
          },
          "database": {
            "type": "string",
            "title": "Database"
          },
          "user": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User"
          },
          "query_timeout": {
            "type": "string",
            "title": "Query Timeout"
          },
          "extra_params": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Extra Params"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At"
          },
          "created_by": {
            "type": "string",
            "title": "Created By"
          }
        },
        "type": "object",
        "required": [
          "name",
          "kind",
          "database",
          "query_timeout",
          "created_at",
          "updated_at",
          "created_by"
        ],
        "title": "SqlSourceResponse"
      },
      "SqlSourceUpdate": {
        "properties": {
          "host": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Host"
          },
          "port": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Port"
          },
          "database": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Database"
          },
          "user": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User"
          },
          "password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Password"
          },
          "query_timeout": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Query Timeout"
          },
          "extra_params": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Extra Params"
          }
        },
        "type": "object",
        "title": "SqlSourceUpdate"
      },
      "TableCrawlResult": {
        "properties": {
          "table_name": {
            "type": "string",
            "title": "Table Name",
            "description": "Name of the table"
          },
          "full_path": {
            "type": "string",
            "title": "Full Path",
            "description": "Full path including schema if applicable"
          },
          "ddl": {
            "type": "string",
            "title": "Ddl",
            "description": "DDL (CREATE TABLE statement) for the table"
          },
          "sample_data": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Sample Data",
            "description": "Sample data from the table"
          },
          "dsds": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dsds",
            "description": "Descriptive Sample Data Schema as formatted string"
          }
        },
        "type": "object",
        "required": [
          "table_name",
          "full_path",
          "ddl",
          "sample_data"
        ],
        "title": "TableCrawlResult",
        "description": "Result of crawling a single table"
      },
      "TableInfo": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "schema_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Schema Name"
          },
          "type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Type"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "TableInfo"
      },
      "TableRegexSelection": {
        "properties": {
          "name_regex": {
            "type": "string",
            "title": "Name Regex",
            "description": "Regular expression to match table names"
          },
          "columns": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Columns",
            "description": "Specific columns to include (default: all)"
          },
          "sample_rows": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sample Rows",
            "description": "Override default sample rows for this table"
          },
          "sample_query": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sample Query",
            "description": "Custom SQL query to fetch sample data"
          }
        },
        "type": "object",
        "required": [
          "name_regex"
        ],
        "title": "TableRegexSelection",
        "description": "Configuration for selecting tables using regex"
      },
      "TableSelection": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Table name (fully qualified preferred)"
          },
          "columns": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Columns",
            "description": "Specific columns to include (default: all)"
          },
          "sample_rows": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sample Rows",
            "description": "Override default sample rows for this table"
          },
          "sample_query": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sample Query",
            "description": "Custom SQL query to fetch sample data"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "TableSelection",
        "description": "Configuration for selecting a specific table"
      },
      "TaskResult": {
        "properties": {
          "task_id": {
            "type": "string",
            "title": "Task Id"
          },
          "data": {
            "additionalProperties": true,
            "type": "object",
            "title": "Data"
          },
          "error_info": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Info"
          }
        },
        "type": "object",
        "required": [
          "task_id",
          "data"
        ],
        "title": "TaskResult"
      },
      "TopicRegexSelection": {
        "properties": {
          "name_regex": {
            "type": "string",
            "title": "Name Regex",
            "description": "Regular expression to match topic names"
          },
          "value_deserializer": {
            "$ref": "#/components/schemas/ValueDeserializer",
            "description": "Message value deserializer",
            "default": "json"
          },
          "sample_messages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sample Messages",
            "description": "Override default sample message count"
          },
          "sampling_strategy": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SamplingStrategy"
              },
              {
                "type": "null"
              }
            ],
            "description": "Override default sampling strategy"
          },
          "fields": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fields",
            "description": "Specific fields to analyze (default: all)"
          }
        },
        "type": "object",
        "required": [
          "name_regex"
        ],
        "title": "TopicRegexSelection",
        "description": "Configuration for selecting topics using regex"
      },
      "TopicSelection": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Topic name"
          },
          "value_deserializer": {
            "$ref": "#/components/schemas/ValueDeserializer",
            "description": "Message value deserializer",
            "default": "json"
          },
          "sample_messages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sample Messages",
            "description": "Override default sample message count"
          },
          "sampling_strategy": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SamplingStrategy"
              },
              {
                "type": "null"
              }
            ],
            "description": "Override default sampling strategy"
          },
          "fields": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fields",
            "description": "Specific fields to analyze (default: all)"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "TopicSelection",
        "description": "Configuration for selecting a specific topic"
      },
      "TypeInferenceConfig": {
        "properties": {
          "enable": {
            "type": "boolean",
            "title": "Enable",
            "description": "Enable custom type inference",
            "default": true
          },
          "string_length_threshold": {
            "type": "integer",
            "title": "String Length Threshold",
            "description": "Strings longer than this are classified as 'text'",
            "default": 50
          }
        },
        "type": "object",
        "title": "TypeInferenceConfig",
        "description": "Configuration for custom column type inference"
      },
      "UploadFileResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether the upload was successful"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Success or error message"
          },
          "file_metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FileMetadata"
              },
              {
                "type": "null"
              }
            ],
            "description": "Metadata of the uploaded file"
          }
        },
        "type": "object",
        "required": [
          "success",
          "message"
        ],
        "title": "UploadFileResponse",
        "description": "Response model for file upload"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "ValueDeserializer": {
        "type": "string",
        "enum": [
          "json",
          "avro",
          "protobuf",
          "string"
        ],
        "title": "ValueDeserializer",
        "description": "Supported message value deserializers"
      },
      "VariableCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "value": {
            "type": "string",
            "title": "Value"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name",
          "value"
        ],
        "title": "VariableCreate"
      },
      "VariableResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At"
          },
          "created_by": {
            "type": "string",
            "title": "Created By"
          }
        },
        "type": "object",
        "required": [
          "name",
          "created_at",
          "updated_at",
          "created_by"
        ],
        "title": "VariableResponse"
      },
      "VariableUpdate": {
        "properties": {
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Value"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "title": "VariableUpdate"
      }
    }
  }
}